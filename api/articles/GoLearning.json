{"title":"GoLearning","uid":"bcbd58ac5f0b48fdbd3c6d1a1cb9f5d7","slug":"GoLearning","date":"2022-09-05T03:18:12.000Z","updated":"2023-03-02T09:11:50.529Z","comments":true,"path":"api/articles/GoLearning.json","keywords":null,"cover":"/post/GoLearning/cover.jpg","content":"<h1 id=\"GoLearning\"><a href=\"#GoLearning\" class=\"headerlink\" title=\"GoLearning\"></a>GoLearning</h1><p>记录一下Go的学习 (主要是ByteDance实习用)，方便以后复习，如果能帮到其他人就更好了</p>\n<hr>\n<h2 id=\"Go-mod\"><a href=\"#Go-mod\" class=\"headerlink\" title=\"Go mod\"></a>Go mod</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go mod init\ngo mod tidy\ngo mod download\ngo get XXX@branch_name  XX@commit-id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>值类型 引用类型</p>\n<p>布尔型：默认为false</p>\n<p>数字类型:默认为0</p>\n<ul>\n<li>(u)int(8&#x2F;16&#x2F;32&#x2F;64)</li>\n<li>Byte</li>\n</ul>\n<p>字符串类型：默认为””</p>\n<p>派生类型：默认为nil</p>\n<ul>\n<li>(a) 指针类型（Pointer）:*type</li>\n<li>(b) 数组类型:[]type</li>\n<li>(c) 结构化类型(struct):</li>\n<li>(d) Channel 类型:chan int</li>\n<li>(e) 函数类型 func(type) type</li>\n<li>(f) 切片类型</li>\n<li>(g) 接口类型（interface）</li>\n<li>(h) Map 类型:map[type] type</li>\n</ul>\n<p>类型转换</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> sum <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">17</span>\n<span class=\"token comment\">//sum := 17也可</span>\n<span class=\"token function\">float32</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>类型断言（只用于空接口 interafce{}）</p>\n<p>接口都包括两个属性 一个是值一个是类型</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ManageInterface</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//会返回一个新的变量 带有新的指定类型 v 与 i不同 i的类型不发生变化</span>\n\tv<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> i<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>ok<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//对i空接口的的类型（一个属性）进行判断 不改变i接口的类型 如果需要改变 需要使用类型断言 改变空接口的类型属性 然后返回一个新的变量</span>\n\t<span class=\"token keyword\">switch</span> i<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is int\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"other\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"变量和常量\"><a href=\"#变量和常量\" class=\"headerlink\" title=\"变量和常量\"></a>变量和常量</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//未进行初始化 有默认值</span>\n<span class=\"token keyword\">var</span> name1<span class=\"token punctuation\">,</span>name2 <span class=\"token keyword\">type</span>\n<span class=\"token comment\">//自动推理 并行赋值</span>\n<span class=\"token keyword\">var</span> name1<span class=\"token punctuation\">,</span>name2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span> \n<span class=\"token comment\">//赋值</span>\nname1 <span class=\"token operator\">=</span> value\n<span class=\"token comment\">//声明变量并进行初始化</span>\nname1<span class=\"token punctuation\">,</span>name2 <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span>\n<span class=\"token comment\">//声明变量并进行初始化</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n  name1 <span class=\"token builtin\">int</span>\n  name2 <span class=\"token builtin\">bool</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//全局变量声明并初始化 注意全局变量不能用:=</span>\n<span class=\"token keyword\">var</span> name1<span class=\"token punctuation\">,</span>name2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span>\n<span class=\"token keyword\">var</span> name1<span class=\"token punctuation\">,</span>name2\n<span class=\"token comment\">//go中必须使用所有声明的变量 _表示只写 和Python不一样</span>\nval<span class=\"token punctuation\">,</span>err <span class=\"token operator\">=</span> <span class=\"token function\">Func1</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">)</span>\nval<span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token function\">Func1</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//常量声明 初始化</span>\n<span class=\"token keyword\">const</span> name1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token comment\">//常量用作枚举</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  c <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//iota是可以被编译器修改的常量</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n    a <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n    b <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n    c <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n    a <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n    b\n    c\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>全局 局部 形参</p>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p>有自增&#x2F;减运算符</p>\n<p>异或:^</p>\n<p>取地址:&amp;</p>\n<p>取值:*</p>\n<h2 id=\"控制流\"><a href=\"#控制流\" class=\"headerlink\" title=\"控制流\"></a>控制流</h2><h3 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//if</span>\n<span class=\"token comment\">//注意如果只有一个cond 不要用() 后面接 &#123;&#125;</span>\n<span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n  \n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//switch var1可以是任何类型 val1,val2,val3类型必须相同</span>\n<span class=\"token keyword\">switch</span> var1 <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> val1<span class=\"token punctuation\">:</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">case</span> val2<span class=\"token punctuation\">,</span>val3<span class=\"token punctuation\">:</span>\n  \t<span class=\"token keyword\">fallthrough</span> <span class=\"token comment\">//强制执行后面的分支</span>\n  <span class=\"token comment\">//不需要break</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//select </span>\n<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">case</span> i1 \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*如果任意某个通信可以进行，它就执行，其他被忽略。\n如果有多个 case 都可以运行，Select 会随机公平地选出一个执行。其他不会执行。\n否则：\n如果有 default 子句，则执行该语句。\n如果没有 default 子句，select 将阻塞，直到某个通信可以运行；Go 不会重新对 channel 或值进行求值。*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><p>貌似没有while 用for代替while</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  ftm<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> map1 <span class=\"token punctuation\">&#123;</span>\n  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> k <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> map1 <span class=\"token punctuation\">&#123;</span>\n  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span>v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> map1 <span class=\"token punctuation\">&#123;</span>\n  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>值传参 引用传参</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span>num2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> res\n  <span class=\"token comment\">//可以返回多个值</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>闭包</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getSequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n   i<span class=\"token operator\">:=</span><span class=\"token number\">0</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n      i<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n     <span class=\"token keyword\">return</span> i  \n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/* nextNumber 为一个函数，函数 i 为 0 */</span>\n   nextNumber <span class=\"token operator\">:=</span> <span class=\"token function\">getSequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n\n   <span class=\"token comment\">/* 调用 nextNumber 函数，i 变量自增 1 并返回 */</span>\n   fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">nextNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">nextNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">nextNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   \n   <span class=\"token comment\">/* 创建新的函数 nextNumber1，并查看结果 */</span>\n   nextNumber1 <span class=\"token operator\">:=</span> <span class=\"token function\">getSequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n   fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">nextNumber1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">nextNumber1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>注意go中数组作为拷贝传递 </p>\n<p>切片(slice)作为引用传递 </p>\n<p>chan func map</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//自动初始化为0</span>\n<span class=\"token keyword\">var</span> list <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\nlist <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> list <span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n<span class=\"token comment\">//可以省略长度 type[5]int</span>\nlist <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//用index初始化</span>\nlist <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">7.0</span><span class=\"token punctuation\">&#125;</span>\nlist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">//二维数组</span>\nlist <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\nlist <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span>element<span class=\"token punctuation\">)</span>\n<span class=\"token function\">copye</span><span class=\"token punctuation\">(</span>new_list<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//返回切片类型</span>\nlist<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"GO指针\"><a href=\"#GO指针\" class=\"headerlink\" title=\"GO指针\"></a>GO指针</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> ptr <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\nptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>name\n<span class=\"token punctuation\">(</span>param <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>param <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Name <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  radius <span class=\"token builtin\">float64</span>\n  name1 <span class=\"token builtin\">int</span>\n  name2 <span class=\"token builtin\">float32</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n Name<span class=\"token punctuation\">)</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//c.radius 即为 Circle 类型对象中的属性 访问属性</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">3.14</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> n<span class=\"token punctuation\">.</span>radius\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//对象初始化</span>\n  <span class=\"token keyword\">var</span> b1 <span class=\"token operator\">=</span> Books <span class=\"token punctuation\">&#123;</span>\n    radius<span class=\"token punctuation\">:</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span>\n    name1<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    name2<span class=\"token punctuation\">:</span><span class=\"token number\">2</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//对象指针</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">*</span>Book\n  b <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b1\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p>注意go和java的interface完全不一样 java是侵入式 显式实现</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//注意任何类型都可以看作是interface&#123;&#125; 作为泛型理解</span>\n<span class=\"token keyword\">var</span> a <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//interface&#123;&#125; 是可以由任意类型转换过来 但是[]string 不能转化为[]interface&#123;&#125;</span>\n<span class=\"token comment\">//甚至[]interface&#123;&#125;可以转化为interface&#123;&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">PrintAll</span><span class=\"token punctuation\">(</span>vals <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> vals <span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    names <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"stanley\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"david\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"oscar\"</span><span class=\"token punctuation\">&#125;</span>\n    vals <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> names <span class=\"token punctuation\">&#123;</span>\n        vals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">PrintAll</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//interface&#123;&#125;可以进行强转</span>\nv<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//非interface&#123;&#125;只能</span>\n<span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"切片-slice\"><a href=\"#切片-slice\" class=\"headerlink\" title=\"切片(slice)\"></a>切片(slice)</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//len为初始长度 cap为最大长度</span>\ns <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">cap</span><span class=\"token punctuation\">)</span>\ns1 <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\ns2 <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span>end<span class=\"token punctuation\">]</span>\ns3 <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>end<span class=\"token punctuation\">]</span>\ns4 <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\ns5 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a>range</h2><p>用来进行遍历</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//遍历list</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> list <span class=\"token punctuation\">&#123;</span>\n  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> map1 <span class=\"token punctuation\">&#123;</span>\n  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//可以省略v k/i必须使用占位符_</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p>hashmap</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//声明</span>\n<span class=\"token keyword\">var</span> map1 <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>key_type<span class=\"token punctuation\">]</span>value_type\n<span class=\"token comment\">//初始化 </span>\nmap1 <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>key_type<span class=\"token punctuation\">]</span>value_type<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//语法糖</span>\nmap1 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>key_type<span class=\"token punctuation\">]</span>value_type<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//delete</span>\n<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//add</span>\nmap1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n<span class=\"token comment\">//查看是否存在</span>\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span>exist <span class=\"token operator\">=</span> map1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>类似C语言向上return error值</p>\n<p>没有java python catch那套</p>\n<h2 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//开启新线程</span>\n<span class=\"token keyword\">go</span> <span class=\"token function\">func_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2><p> defer修饰的函数的参数在声明时确定</p>\n<p>在函数返回时执行</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\t<span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\ta <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token comment\">//5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>用defer修饰的call会等到周围的函数都执行完之后才执行，但是此call的参数会提前压入</p>\n<h2 id=\"chan\"><a href=\"#chan\" class=\"headerlink\" title=\"chan\"></a>chan</h2><p>主要用于goroutine之间的交互通讯，管道(队列)</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//创建int类型的管道 设置容量为100 单位为元素的个数</span>\nch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>，<span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//将v放入管道</span>\nch <span class=\"token operator\">&lt;-</span> v\n<span class=\"token comment\">//从chan中接收数据 并赋给x,ok表示执行情况</span>\nx，ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> ch\n<span class=\"token comment\">//for range可以遍历chan</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//select 伪随机的执行操作</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> quit <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> c <span class=\"token operator\">&lt;-</span> x<span class=\"token punctuation\">:</span>\n            x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> x<span class=\"token operator\">+</span>y\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>quit<span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"quit\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    quit <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        quit <span class=\"token operator\">&lt;-</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> quit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//加上for可以无限循环</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//timeout 如果超时 就把当前时间放进chan</span>\n<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\">//Timer</span>\ntimer <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTimer</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;-</span>timer1<span class=\"token punctuation\">.</span>C\nstop <span class=\"token operator\">:=</span> timer<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//Ticker</span>\nticker <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTicker</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond <span class=\"token operator\">*</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> t <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ticker<span class=\"token punctuation\">.</span>C <span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tick at\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//关闭管道 关闭之后不能写入 可以读出（已发送数据、零值）</span>\n<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//用range遍历 会跳出</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//查看chan状态</span>\ni<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>c\n<span class=\"token comment\">//可以利用chan进行同步</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>done <span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 通知任务已完成</span>\n    done <span class=\"token operator\">&lt;-</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    done <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 等待任务完成 chan中出现元素 开始执行下面的代码</span>\n    <span class=\"token operator\">&lt;-</span>done\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> <span class=\"token comment\">//返回匿名函数</span>\n<span class=\"token comment\">//func(i, j string) string为函数类型 返回一个函数</span>\n <span class=\"token keyword\">func</span> <span class=\"token function\">GFG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span> \n\t\t<span class=\"token comment\">//创建一个函数</span>\n     myf <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span> \n          <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\"nhooo\"</span>\n     <span class=\"token punctuation\">&#125;</span> \n   <span class=\"token comment\">//返回创建的函数</span>\n    <span class=\"token keyword\">return</span> myf \n <span class=\"token punctuation\">&#125;</span> \n    \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    value <span class=\"token operator\">:=</span> <span class=\"token function\">GFG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"to \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//创建匿名函数并执行</span>\n<span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c celsius<span class=\"token punctuation\">)</span> celsius <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//重命名类型</span>\n<span class=\"token keyword\">type</span> sensor <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c celsius<span class=\"token punctuation\">)</span> kelvin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h3><p>注意不像java有守护线程 main不管其他线程 </p>\n<p>利用sync.WaitGroup 进行同步 main等其他线程执行完之后 再推出</p>\n<p>注意Golang与Java不一样 Javamain执行完之后线程不会结束，Golang中main执行完协程自动结束</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n\t<span class=\"token string\">\"sync\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> WaitGroupWrapper <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tsync<span class=\"token punctuation\">.</span>WaitGroup\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Consumer <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tdedupMap     <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\tconsumerName <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Consumer<span class=\"token punctuation\">)</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>consumerName\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Consumer<span class=\"token punctuation\">)</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>dedupMap<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>dedupMap<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Consumer<span class=\"token punctuation\">)</span> <span class=\"token function\">getVal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>dedupMap<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Consumer<span class=\"token punctuation\">)</span> <span class=\"token function\">setVal</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc<span class=\"token punctuation\">.</span>dedupMap<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Consumer<span class=\"token punctuation\">)</span> <span class=\"token function\">consumerMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//wg.Add(1)</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc1 <span class=\"token operator\">:=</span> Consumer<span class=\"token punctuation\">&#123;</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c1\"</span><span class=\"token punctuation\">&#125;</span>\n\tc2 <span class=\"token operator\">:=</span> Consumer<span class=\"token punctuation\">&#123;</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c2\"</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//注意要在main中先加</span>\n  wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">consumerMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">consumerMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//所有协程结束main才能结束</span>\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//默认没有缓冲区</span>\nch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//设置缓冲区</span>\nch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//可以用for进行遍历 本质上是while 可以阻塞</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ch <span class=\"token punctuation\">&#123;</span>\n  \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Write Data</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>intChan <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 放入数据</span>\n\t\tintChan <span class=\"token operator\">&lt;-</span> i\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write Data\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//写完之后就可以关闭channel了 关闭之后还可以读channel</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>intChan<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Read data</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span>intChan <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> exitChan <span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">for</span>  <span class=\"token punctuation\">&#123;</span>\n\t\tv<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span><span class=\"token operator\">&lt;-</span> intChan\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">//time.Sleep(time.Second)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读到数据\"</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 读取完数据后，即任务完成</span>\n    <span class=\"token comment\">// exitChan 是一个标志，当读完数据后，向exit中存放一个true，主线程除非取出这个true，否则不停止</span>\n\texitChan <span class=\"token operator\">&lt;-</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>exitChan<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tintChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n\texitChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>intChan<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span>intChan<span class=\"token punctuation\">,</span>exitChan<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span>  <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>exitChan\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 定义一个map</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n    myMap <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 声明一个全局变量互斥锁</span>\n    <span class=\"token comment\">// lock 是一个全局互斥锁</span>\n    <span class=\"token comment\">// sync 是包：sychorinized</span>\n    <span class=\"token comment\">// Mutex : 互斥</span>\n    lock sync<span class=\"token punctuation\">.</span>Mutex\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 定义一个函数计算n！</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>num <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    res <span class=\"token operator\">:=</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">&#123;</span>\n        res <span class=\"token operator\">+=</span> i\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 将计算出的结果存入map中</span>\n    <span class=\"token comment\">// 访问 myMap 前，加锁</span>\n    lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    myMap<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res\n    <span class=\"token comment\">// 访问完，释放所</span>\n    lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//判断类型是否相等</span>\nreflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//判断类型和值是否相等</span>\nreflect<span class=\"token punctuation\">.</span><span class=\"token function\">DeepEqual</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//直接获得类型名</span>\nreflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"判断运行时变量类型\"><a href=\"#判断运行时变量类型\" class=\"headerlink\" title=\"判断运行时变量类型\"></a>判断运行时变量类型</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> t <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nt <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Test<span class=\"token punctuation\">&#123;</span>\n\ta<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\np <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>t\n<span class=\"token keyword\">switch</span> t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">case</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">:</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>Test<span class=\"token punctuation\">:</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"other\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><p>gorm进行mysql操作</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//按照数据库进行定义 struct字段可以是数据库的一部分 即智能选择字段</span>\n<span class=\"token keyword\">type</span> WkTenantInit <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tgorm<span class=\"token punctuation\">.</span>Model\n\tTenantID <span class=\"token builtin\">string</span> <span class=\"token string\">`gorm:\"column:tenant_id\"`</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//query 不能声明为指针类型</span>\n<span class=\"token keyword\">var</span> tenantIDs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>WkTenantInit\nresult <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Model</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>WkTenantInit<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tenantIDs<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//insert</span>\nresult <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>WkTenantInit<span class=\"token punctuation\">&#123;</span>\n\tTenantID<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//select</span>\n<span class=\"token comment\">//智能选择字段</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>users<span class=\"token punctuation\">)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">Model</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>WkTenantInit<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tenantIDs<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//where or not condition</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jinzhu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name in (?)\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"jinzhu\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jinzhu 2\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>users<span class=\"token punctuation\">)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">Not</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jinzhu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role = ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Or</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role = ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"super_admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//update</span>\nresult <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Model</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role = ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Updates</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">&#123;</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> Age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//delete</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jinzhu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>email<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"MQ\"><a href=\"#MQ\" class=\"headerlink\" title=\"MQ\"></a>MQ</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//handler</span>\n<span class=\"token keyword\">type</span> handler <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//注册Batchhandler</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>Handler<span class=\"token punctuation\">)</span> <span class=\"token function\">HandleMessages</span><span class=\"token punctuation\">(</span>msgs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>CtxMessageExt<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//注册handler</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>handler<span class=\"token punctuation\">)</span> <span class=\"token function\">HandleMessage</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> msg <span class=\"token operator\">*</span>pb<span class=\"token punctuation\">.</span>ConsumeMessage<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//生成consumer</span>\ncfg <span class=\"token operator\">:=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">NewDefaultConsumerConfig</span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">.</span>ConsumerGroup<span class=\"token punctuation\">,</span> cc<span class=\"token punctuation\">.</span>Topic<span class=\"token punctuation\">,</span> cc<span class=\"token punctuation\">.</span>ClusterName<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//有序消费</span>\n\tcfg<span class=\"token punctuation\">.</span>Orderly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token comment\">//设置协程数</span>\n\tcfg<span class=\"token punctuation\">.</span>WorkerNum <span class=\"token operator\">=</span> cc<span class=\"token punctuation\">.</span>WorkerNum\n\t<span class=\"token comment\">//tag过滤</span>\n\tcfg<span class=\"token punctuation\">.</span>SubExpr <span class=\"token operator\">=</span> cc<span class=\"token punctuation\">.</span>SubExpr\n\t<span class=\"token comment\">//从上次的offset开始消费 可能重复</span>\n\tcfg<span class=\"token punctuation\">.</span>ConsumeFromWhere <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>ConsumeFromWhere_CONSUME_FROM_LATEST\n\t<span class=\"token comment\">//batch size</span>\n\tcfg<span class=\"token punctuation\">.</span>ConsumeMessageBatchMaxSize <span class=\"token operator\">=</span> cc<span class=\"token punctuation\">.</span>ConsumeMessageBatchMaxSize\n\t<span class=\"token comment\">//batch wait time</span>\n\tcfg<span class=\"token punctuation\">.</span>ConsumeMessageBatchMaxLingerTime <span class=\"token operator\">=</span> cc<span class=\"token punctuation\">.</span>ConsumeMessageBatchMaxLingerTime\n\n\tr<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">NewConsumer</span><span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlogs<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\thandler <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Handler<span class=\"token punctuation\">&#123;</span>\n\t\tuhandler<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterBatchHandler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//start consumer here</span>\n\t<span class=\"token comment\">//r.Start() blocks here</span>\n\t<span class=\"token comment\">//if you don't want to block, perhaps call `go r.Start()`</span>\n\tlogs<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\tsig <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> os<span class=\"token punctuation\">.</span>Signal<span class=\"token punctuation\">)</span>\n\tsignal<span class=\"token punctuation\">.</span><span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span>sig<span class=\"token punctuation\">,</span> syscall<span class=\"token punctuation\">.</span>SIGTERM<span class=\"token punctuation\">,</span> syscall<span class=\"token punctuation\">.</span>SIGINT<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">&lt;-</span>sig\n\tlogs<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><h3 id=\"marshal-amp-unmarshal\"><a href=\"#marshal-amp-unmarshal\" class=\"headerlink\" title=\"marshal &amp; unmarshal\"></a>marshal &amp; unmarshal</h3><p>类似序列化</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">jsonData <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`&#123;\n\t\"name\":\"迪丽热巴\",\n\t\"birthday\":\"1992-06-03\",\n\t\"birthPlace\":\"新疆乌鲁木齐市\",\n\t\"opus\":[\n\t\t\"《阿娜尔罕》\",\n\t\t\"《逆光之恋》\",\n\t\t\"《克拉恋人》\"\n\t]\n\t\"opus\": &#123;\n     \"Date\":\"2013\",\n     \"Title\":\"《阿娜尔罕》\"\n    &#125;\n&#125;`</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> actress Actress\n<span class=\"token comment\">//unmarshal 之后变成了struct 里面有map和slice</span>\nerr <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>actress<span class=\"token punctuation\">)</span>\njsonData<span class=\"token punctuation\">,</span>err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>actress<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>s\"<span class=\"token punctuation\">,</span> actress<span class=\"token punctuation\">.</span>Opus<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">)</span>\n \n            \n        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Person <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tage  <span class=\"token builtin\">int</span>\n\tname <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> persons <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Person\n\tpersons <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\tpersons <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\tsort<span class=\"token punctuation\">.</span><span class=\"token function\">SliceStable</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> persons<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">!=</span> persons<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> persons<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;</span> persons<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> persons<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;</span> persons<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> person <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> persons <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"文件读取写入\"><a href=\"#文件读取写入\" class=\"headerlink\" title=\"文件读取写入\"></a>文件读取写入</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io/ioutil\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfileName <span class=\"token operator\">:=</span> <span class=\"token string\">\"myfile.txt\"</span>\n\tf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">OpenFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>O_APPEND<span class=\"token operator\">|</span>os<span class=\"token punctuation\">.</span>O_WRONLY<span class=\"token punctuation\">,</span> <span class=\"token number\">0600</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create failed\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">defer</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new data that wasn't there originally\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tdata<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"大坑\"><a href=\"#大坑\" class=\"headerlink\" title=\"大坑\"></a>大坑</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//注意到底是声明指针还是结构体变量</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">UnmarshalJobDataMapJsonBiz</span><span class=\"token punctuation\">(</span>jobDataMapJson <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>biz_model<span class=\"token punctuation\">.</span>JobData<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tjobDataMap <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>biz_model<span class=\"token punctuation\">.</span>JobData<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> jobDataID<span class=\"token punctuation\">,</span> jobDataListJson <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> jobDataMapJson <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">var</span> jobDataList <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>biz_model<span class=\"token punctuation\">.</span>JobData\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> jobDataJson <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> jobDataListJson <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">var</span> jobData biz_model<span class=\"token punctuation\">.</span>JobData\n\t\t\terr <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jobDataJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>jobData<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tjobDataList <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>jobDataList<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>jobData<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tjobDataMap<span class=\"token punctuation\">[</span>jobDataID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> jobDataList\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> jobDataMap<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//注意返回的值不能直接取&amp;</span>\n<span class=\"token operator\">&amp;</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"GoLearning记录一下Go的学习 (主要是ByteDance实习用)，方便以后复习，如果能帮到其他人就更好了 Go modgo mod init go mod tidy go mod download go get XXX@branch_name XX@commit-id ...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"learning","slug":"learning","count":12,"path":"api/categories/learning.json"}],"tags":[{"name":"Go","slug":"Go","count":1,"path":"api/tags/Go.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#GoLearning\"><span class=\"toc-text\">GoLearning</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Go-mod\"><span class=\"toc-text\">Go mod</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">变量和常量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">作用域</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E6%B5%81\"><span class=\"toc-text\">控制流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">条件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">循环</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GO%E6%8C%87%E9%92%88\"><span class=\"toc-text\">GO指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">结构体</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%87%E7%89%87-slice\"><span class=\"toc-text\">切片(slice)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#range\"><span class=\"toc-text\">range</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#map\"><span class=\"toc-text\">map</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">错误处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E5%8F%91\"><span class=\"toc-text\">并发</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#defer\"><span class=\"toc-text\">defer</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#chan\"><span class=\"toc-text\">chan</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">匿名函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#type\"><span class=\"toc-text\">type</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">多线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5\"><span class=\"toc-text\">同步</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E9%81%93\"><span class=\"toc-text\">通道</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%94%81\"><span class=\"toc-text\">锁</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84\"><span class=\"toc-text\">反射</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">判断运行时变量类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mysql\"><span class=\"toc-text\">mysql</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MQ\"><span class=\"toc-text\">MQ</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常用函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#marshal-amp-unmarshal\"><span class=\"toc-text\">marshal &amp; unmarshal</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sort\"><span class=\"toc-text\">sort</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%86%99%E5%85%A5\"><span class=\"toc-text\">文件读取写入</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E5%9D%91\"><span class=\"toc-text\">大坑</span></a></li></ol></li></ol>","author":{"name":"Sihan Chen","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"Had I not seen the sun, I could have borne the shade","socials":{"github":"https://github.com/sihan-chen-yes","twitter":"","stackoverflow":"https://stackoverflow.com/users/15780533/sihan","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MESSAGE BOARD","uid":"b39baedab164cf8277508d2f603d42e1","slug":"messageboard","date":"2022-11-02T13:25:43.000Z","updated":"2022-11-03T03:45:41.000Z","comments":true,"path":"api/articles/messageboard.json","keywords":null,"cover":"/post/messageboard/cover.jpg","text":"Just a Message Board, feel free to talk with me in the comment area, if you want!","link":"","photos":[],"count_time":{"symbolsCount":81,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Sihan Chen","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"Had I not seen the sun, I could have borne the shade","socials":{"github":"https://github.com/sihan-chen-yes","twitter":"","stackoverflow":"https://stackoverflow.com/users/15780533/sihan","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CppLearning","uid":"043ea5846f4ce7e1aaad5107c0f5a6a3","slug":"CppLearning","date":"2021-06-21T02:55:58.000Z","updated":"2023-03-02T08:57:11.752Z","comments":true,"path":"api/articles/CppLearning.json","keywords":null,"cover":"/post/CppLearning/cover.jpg","text":"C++learning1.基本语法1.命名空间在C&#x2F;C++中，变量、函数和类都是大量存在的，这些变量、函数和类的名称将都存在于全局作用域中，可能会导致很多冲突。使用命名空间的目的是对标识符的名称进行本地化，以避免命名冲突或名字污染。 定义：namespace name1...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"learning","slug":"learning","count":12,"path":"api/categories/learning.json"}],"tags":[{"name":"C++","slug":"C","count":1,"path":"api/tags/C.json"}],"author":{"name":"Sihan Chen","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"Had I not seen the sun, I could have borne the shade","socials":{"github":"https://github.com/sihan-chen-yes","twitter":"","stackoverflow":"https://stackoverflow.com/users/15780533/sihan","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}