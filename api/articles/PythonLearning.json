{"title":"PythonLearning","uid":"16dddd2808895ffe203f5dab69ce83b4","slug":"PythonLearning","date":"2020-09-05T02:57:00.000Z","updated":"2022-11-08T07:57:11.000Z","comments":true,"path":"api/articles/PythonLearning.json","keywords":null,"cover":"/post/PythonLearning/cover.jpg","content":"<h1 id=\"PythonLearning\"><a href=\"#PythonLearning\" class=\"headerlink\" title=\"PythonLearning\"></a>PythonLearning</h1><p>记录一下Python的学习，方便以后复习，如果能帮到其他人就更好了</p>\n<hr>\n<h2 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h2><h3 id=\"input\"><a href=\"#input\" class=\"headerlink\" title=\"input\"></a>input</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">left<span class=\"token punctuation\">,</span>right <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#以list的形式存储</span>\nl <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a>output</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#python中没有类似c和java的%s %d</span>\n<span class=\"token comment\">#想要输出的都包括再括号中</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125;,&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#保留两位小数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;:.2f&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#表示带符号</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;:+.2f&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#科学计数法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;:.2e&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#不空行</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p>~:取反</p>\n<p>^:异或</p>\n<h2 id=\"str-x2F-chr\"><a href=\"#str-x2F-chr\" class=\"headerlink\" title=\"str&#x2F;chr\"></a>str&#x2F;chr</h2><h3 id=\"1-lower-upper-方法\"><a href=\"#1-lower-upper-方法\" class=\"headerlink\" title=\"1.lower() upper() 方法\"></a>1.lower() upper() 方法</h3><p>对字符&#x2F;字符串可以直接使用 如果是字母自动生效 否则不起作用</p>\n<h3 id=\"2-count\"><a href=\"#2-count\" class=\"headerlink\" title=\"2.count\"></a>2.count</h3><p>统计字符串中字符出现次数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span>\ns<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>unhashable! 不能做dict 的key</p>\n<h3 id=\"1-list-index\"><a href=\"#1-list-index\" class=\"headerlink\" title=\"1.list.index\"></a>1.list.index</h3><p>得到下标<br>如果有多个相同元素 优先第一个</p>\n<h3 id=\"2-list-insert-index-obj\"><a href=\"#2-list-insert-index-obj\" class=\"headerlink\" title=\"2.list.insert(index,obj)\"></a>2.list.insert(index,obj)</h3><p>list.insert(index,obj)在原列表上进行插入，直接更改原列表，无有意义的返回值，默认返回None</p>\n<p>hint:replace字符串不同，由于字符串的不可变性，replace需要进行构造新的字符串，所以有有意义的返回值，返回新的字符串</p>\n<h3 id=\"3-join-split\"><a href=\"#3-join-split\" class=\"headerlink\" title=\"3.join split\"></a>3.join split</h3><p>‘char’.join(seq) 将char作为分隔符将seq里面的元素连接成新的字符串</p>\n<p>注意seq里的元素必须是字符数组</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">#互逆\n#注意seq必须是由字符(串)组成的\n&#39;,&#39;.join(seq)\ns.split(&#39;,&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-sort-amp-amp-sorted-key-x3D-排序方式-reverse-x3D-是否反转-默认升序\"><a href=\"#4-sort-amp-amp-sorted-key-x3D-排序方式-reverse-x3D-是否反转-默认升序\" class=\"headerlink\" title=\"4.sort &amp;&amp; sorted(key&#x3D;排序方式,reverse&#x3D;是否反转 默认升序)\"></a>4.sort &amp;&amp; sorted(key&#x3D;排序方式,reverse&#x3D;是否反转 默认升序)</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">s &#x3D; [1,5,3]\ns.sort() # s &#x3D; sorted(s) 两种方法都可以 前一种是方法，与list这种结构捆绑，在原有的list上操作，不生成新的list,后一种是库函数，返回新的list\ns &#x3D; &quot;ba&quot;\ns &#x3D; &#39;&#39;.join(sorted(s))\nl &#x3D; sorted(int(t[:2]) * 60 + int(t[-2:]) for t in timePoints)\nl.sort()\nsorted(l)\n#key可以传一个cmp函数进去（需要进行封装）\nfrom functools import cmp_to_key\ndef cmp(a,b):\n    return a - b\nl.sort(key&#x3D;cmp_to_key(cmp))\n#key 当然也可以是lambda表达式\nl.sort(key&#x3D;lambda x:x)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>默认升序 reverse&#x3D;True 表示逆序排列</p>\n<h3 id=\"5-切片\"><a href=\"#5-切片\" class=\"headerlink\" title=\"5.切片\"></a>5.切片</h3><p>注意[a:b]:表示左闭右开，右边取不到，左边能取到</p>\n<h3 id=\"6-list-count-obj\"><a href=\"#6-list-count-obj\" class=\"headerlink\" title=\"6.list.count(obj)\"></a>6.list.count(obj)</h3><p>统计某个元素出现的次数</p>\n<h3 id=\"7-list-extend-seq\"><a href=\"#7-list-extend-seq\" class=\"headerlink\" title=\"7.list.extend(seq)\"></a>7.list.extend(seq)</h3><p>seq为可迭代对象</p>\n<p>向右端迭代加入seq中的所有元素</p>\n<h3 id=\"8-list-pop\"><a href=\"#8-list-pop\" class=\"headerlink\" title=\"8.list.pop()\"></a>8.list.pop()</h3><p>默认index &#x3D; -1 即最后一个 </p>\n<p>注意pop里面的参数是index</p>\n<h3 id=\"9-list-remove-obj\"><a href=\"#9-list-remove-obj\" class=\"headerlink\" title=\"9.list.remove(obj)\"></a>9.list.remove(obj)</h3><p>移除第一个默认的匹配项 </p>\n<p>注意remove里面的参数是element！</p>\n<h3 id=\"10-切片\"><a href=\"#10-切片\" class=\"headerlink\" title=\"10.切片\"></a>10.切片</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">s1 &#x3D; [1,2,3]\n#深拷贝!\ns2 &#x3D; s1[:]\n#可以用来反转列表！\ns3 &#x3D; s1[::-1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"11-列表推导式\"><a href=\"#11-列表推导式\" class=\"headerlink\" title=\"11.列表推导式\"></a>11.列表推导式</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">return [1 if x &gt;&#x3D; 0.5 else 0 for x in probability]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>每当申请的内存用完了 如果还在加元素 就寻找一个更大的内存 并完成复制</p>\n<p>如果不断减少元素，就找一个更小的内存 并完成复制 以节省内存</p>\n<h2 id=\"dict\"><a href=\"#dict\" class=\"headerlink\" title=\"dict\"></a>dict</h2><h3 id=\"1、if-xxx-in-dic\"><a href=\"#1、if-xxx-in-dic\" class=\"headerlink\" title=\"1、if xxx in dic\"></a>1、if xxx in dic</h3><p>判断的是key在不在dic里，而不是value</p>\n<h3 id=\"2-字典相关操作\"><a href=\"#2-字典相关操作\" class=\"headerlink\" title=\"2.字典相关操作\"></a>2.字典相关操作</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">dict.items() 返回turple的可迭代对象\ndict.keys()\ndict.values()\ndict.pop(key)#这里和list有区别！pop 在字典里是pop key 返回的是value 在list里是pop index 返回的是element<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple\"></a>tuple</h2><p>hashbale </p>\n<p>可以作为dict的 key 可以由list转过来</p>\n<h2 id=\"Random\"><a href=\"#Random\" class=\"headerlink\" title=\"Random\"></a>Random</h2><h3 id=\"1-int\"><a href=\"#1-int\" class=\"headerlink\" title=\"1.int\"></a>1.int</h3><p>random.randint(a,b)</p>\n<p>包含[a,b]</p>\n<h3 id=\"2-char\"><a href=\"#2-char\" class=\"headerlink\" title=\"2.char\"></a>2.char</h3><p>random.choice(string)</p>\n<p>实际上是选一个元素</p>\n<h3 id=\"3-string\"><a href=\"#3-string\" class=\"headerlink\" title=\"3.string\"></a>3.string</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>队列插入弹出操作都是O(1)</p>\n<p>peek时间复杂度为O(1)</p>\n<p>队列完全可以用链表实现</p>\n<p>只需要用deque和priorityqueue</p>\n<h3 id=\"deque\"><a href=\"#deque\" class=\"headerlink\" title=\"deque\"></a>deque</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">from collections import deque<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>deque是python中的双端队列，既可以当作单向队列queue使用，又可以当作stack使用(stack也能用list实现)</p>\n<p>两端操作的时间复杂度都是O(1) 但是不能随机访问 (list可以随机访问 但是对左端操作的时间复杂度为O(n))</p>\n<p>感觉deque更像是链表</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">dq &#x3D; deque()&#x2F;&#x2F;构造器 第一个参数为初始的元素，第二个为maxlen 默认无穷大\ndeque.append(obj)\ndeque.appendleft(obj)\ndeque.popleft()\ndeque.pop()\n#队列长度\nlen(dq)\ndq[0]\ndq[-1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"PriorityQueue\"><a href=\"#PriorityQueue\" class=\"headerlink\" title=\"PriorityQueue\"></a>PriorityQueue</h3><p>优先队列 默认递增队列 先出来的数value更小</p>\n<p>不推荐使用（没办法peek)</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">import queue\nqueue.PriorityQueue()\n#第一个参数为优先级，第二个参数是obj 需要合并成一个turple\nq.put((1,2))\n#优先get出低优先级的turple\nq.get()\n#优先队列的容量\nq.qsize()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p>Python默认小顶堆! 如果需要大顶堆可以将元素取相反数 最后再取相反数回来</p>\n<p>插入弹出操作为O(logn):为了维护堆的性质 </p>\n<p>插入需要经过logn次上浮</p>\n<p>删除需要经过logn次下沉</p>\n<p>建堆O(n)</p>\n<p>peek时间复杂度为O(1)</p>\n<p>注意海量数据求TOPk(维护容量为k的堆 遍历元素 每次操作插入删除复杂度为O(logk)建堆O(k)  总共O(nlogk))</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">import heapq\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    h &#x3D; []\n    #先创建堆\n    heapq.heapify(h)\n    heapq.heappush(h,1)\n    heapq.heappush(h,4)\n    heapq.heappush(h,5)\n    print(heapq.heappop(h))\n    print(heapq.heappop(h))\n    print(heapq.heappop(h))\n    #可迭代 堆顶元素\n    print(h[0])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"DFS-BFS\"><a href=\"#DFS-BFS\" class=\"headerlink\" title=\"DFS BFS\"></a>DFS BFS</h2><h3 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h3><p>路径类问题 排列组合问题</p>\n<h2 id=\"生成器和迭代器\"><a href=\"#生成器和迭代器\" class=\"headerlink\" title=\"生成器和迭代器\"></a>生成器和迭代器</h2><h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">class Fib:\n    def __init__(self, n):\n        self.prev &#x3D; 0\n        self.cur &#x3D; 1\n        self.n &#x3D; n\n    def __iter__(self):\n    \treturn self\n    def __next__(self):\n        if self.n &gt; 0:\n            value &#x3D; self.cur\n            self.cur &#x3D; self.cur + self.prev\n            self.prev &#x3D; value\n            self.n -&#x3D; 1\n            return value\n    \telse:\n            raise StopIteration()\n    # 兼容python2\n    def __next__(self):\n        return self.next()\nf &#x3D; Fib(10)\nprint([i for i in f])\n    #[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\t\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><p>本质是迭代器</p>\n<p>在 Python 中还有一种函数，用关键字 yield 来返回值，这种函数叫<strong>生成器函数</strong> ，函数被调用时会返回一 个生成器对象，生成器本质上还是一个迭代器(iterable)，也是用在迭代操作中，因此它有和迭代器一样的特性，唯 一的区别在于实现方式上不一样，后者更加简洁</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">def fib(n):\n    prev, curr &#x3D; 0, 1\n    while n &gt; 0:\n        n -&#x3D; 1\n        yield curr\n        prev, curr &#x3D; curr, curr + prev\nprint([i for i in fib(10)])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">class heap(object):\n    #括号里可以填写要继承的父类 python语法上支持多继承\n    #python类属性的引用都需要带上self\n    &#39;&#39;&#39;mode &#x3D;&#x3D; 0 means little heap mode &#x3D;&#x3D; 1 means big heap&#39;&#39;&#39;\n    def __init__(self,heap,mode):\n        self.__heap &#x3D; []\n        self.__mode &#x3D; mode\n        for element in heap:\n            self.push(element)\n\n    def get_size(self):\n        return len(self.__heap)\n\n    def get_top(self):\n        if not heap:\n            raise IndexError()\n        return self.__heap[0]\n\n    def push(self,element):\n        p &#x3D; self.get_size()\n        self.__heap.append(element)\n        if self.__mode &#x3D;&#x3D; 0:\n            while p !&#x3D; 0 and self.__heap[(p - 1) &#x2F;&#x2F; 2] &gt; self.__heap[p]:\n                self.__heap[(p - 1) &#x2F;&#x2F; 2],self.__heap[p] &#x3D; self.__heap[p],self.__heap[(p - 1) &#x2F;&#x2F; 2]\n                p &#x3D; (p - 1) &#x2F;&#x2F; 2\n        else:\n            while p !&#x3D; 0 and self.__heap[(p - 1) &#x2F;&#x2F; 2] &lt; self.__heap[p]:\n                self.__heap[(p - 1) &#x2F;&#x2F; 2],self.__heap[p] &#x3D; self.__heap[p],self.__heap[(p - 1) &#x2F;&#x2F; 2]\n                p &#x3D; (p - 1) &#x2F;&#x2F; 2\n        ##up\n\n    def pop(self):\n        p &#x3D; self.get_size() - 1\n        self.__heap[0],self.__heap[p] &#x3D; self.__heap[p],self.__heap[0]\n        top &#x3D; self.__heap.pop()\n        p &#x3D; 0\n        size &#x3D; self.get_size()\n        if self.__mode &#x3D;&#x3D; 0:\n            while p * 2 + 1 &lt; size and p * 2 + 2 &lt; size:\n                if self.__heap[p] &lt;&#x3D; self.__heap[p * 2 + 1] and self.__heap[p] &lt;&#x3D; self.__heap[p * 2 + 2]:\n                    return top\n                elif self.__heap[p * 2 + 1] &lt; self.__heap[p * 2 + 2]:\n                        self.__heap[p * 2 + 1],self.__heap[p] &#x3D; self.__heap[p],self.__heap[p * 2 + 1]\n                        p &#x3D; p * 2 + 1\n                else:\n                    self.__heap[p * 2 + 2],self.__heap[p] &#x3D; self.__heap[p],self.__heap[p * 2 + 2]\n                    p &#x3D; p * 2 + 2\n            if p * 2 + 1 &lt; size and self.__heap[p] &gt; self.__heap[p * 2 + 1]:\n                self.__heap[p * 2 + 1], self.__heap[p] &#x3D; self.__heap[p], self.__heap[p * 2 + 1]\n                ##down handle index out of range\n        else:\n            while p * 2 + 1 &lt; size and p * 2 + 2 &lt; size:\n                if self.__heap[p] &gt;&#x3D; self.__heap[p * 2 + 1] and self.__heap[p] &gt;&#x3D; self.__heap[p * 2 + 2]:\n                    return top\n                elif self.__heap[p * 2 + 1] &gt; self.__heap[p * 2 + 2]:\n                        self.__heap[p * 2 + 1],self.__heap[p] &#x3D; self.__heap[p],self.__heap[p * 2 + 1]\n                        p &#x3D; p * 2 + 1\n                else:\n                    self.__heap[p * 2 + 2],self.__heap[p] &#x3D; self.__heap[p],self.__heap[p * 2 + 2]\n                    p &#x3D; p * 2 + 2\n            if p * 2 + 1 &lt; size and self.__heap[p] &lt; self.__heap[p * 2 + 1]:\n                self.__heap[p * 2 + 1], self.__heap[p] &#x3D; self.__heap[p], self.__heap[p * 2 + 1]\n                #down handle index out of range\n        return top<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"和\"><a href=\"#和\" class=\"headerlink\" title=\"和*\"></a><em>和</em>*</h2><p>*arg代表位置参数 实质上是turple</p>\n<p>**arg代表关键词参数 实质上是dict</p>\n<h2 id=\"并行赋值-多变量赋值-、连续赋值\"><a href=\"#并行赋值-多变量赋值-、连续赋值\" class=\"headerlink\" title=\"并行赋值(多变量赋值) 、连续赋值\"></a>并行赋值(多变量赋值) 、连续赋值</h2><h3 id=\"并行赋值（多变量赋值）\"><a href=\"#并行赋值（多变量赋值）\" class=\"headerlink\" title=\"并行赋值（多变量赋值）\"></a>并行赋值（多变量赋值）</h3><p>千万别用 超级容易错 并且错了都没法de的那种 如果光是两个int这种不可变类型勉强可用 一旦涉及指针千万别用！</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def reverseList(self, head):\n    prev &#x3D; None\n    while head:\n        head.next, prev, head &#x3D; prev, head, head.next\n    return prev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>具体的过程是这样的。先执行&#x3D;右边表达式<code>(None, head, head.next)</code>，然后第一步把<code>head.next=None</code>，此时<code>head</code>变成了<code>1-&gt;None</code>；第二步，执行<code>prev=head</code>，这里为什么<code>head</code>的值时<code>1-&gt;None</code>而不是<code>1-&gt;2-3-&gt;None</code>呢，因为虽然等式先执行的右边，拿到了<code>head</code>，但是上一步的操作是将<code>head</code>修改了，由于head是一个可变对象，prev的值是<code>1-&gt;None</code>，最后再把<code>head=head.next</code>，这里为什么<code>head.next</code>的值又是<code>2-&gt;3-&gt;None</code>了呢，因为，执行右侧的表达式之后，<code>head.next</code>这个对象再前两步中没有被修改，一直都是<code>2-&gt;3-&gt;None</code>，这正是和第二步不同的地方，所以这两个写法是等同的。</p>\n<h3 id=\"连续赋值\"><a href=\"#连续赋值\" class=\"headerlink\" title=\"连续赋值\"></a>连续赋值</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">a &#x3D; a.next &#x3D; ListNode(1)\n#等价于\n_ &#x3D; ListNode(1)  \na &#x3D; _\na.next &#x3D; _\n\nfoo &#x3D; [0]\nbar &#x3D; foo\nfoo[0] &#x3D; foo &#x3D; [1]\n\nprint(foo) #[1]\nprint(bar) #[[1]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>遇到指针就别用这些东西了！</p>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h2><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">_foo\n#表示private 方法&#x2F;属性\n__foo\n#表示final 不允许进行重写\n__foo__\n#表示特殊的方法 一般会对其进行重写\nfoo_\n#表示避免和python内置关键词重复\n_\n#约定表示占位符<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"特殊方法\"><a href=\"#特殊方法\" class=\"headerlink\" title=\"特殊方法\"></a>特殊方法</h2><p>1.<strong>getitem</strong>:</p>\n<p>重写后实例变为subscriptable 支持通过实例直接当字典和list用 eg.f[1]</p>\n<h2 id=\"OOP\"><a href=\"#OOP\" class=\"headerlink\" title=\"OOP\"></a>OOP</h2><h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"@注解\"></a>@注解</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">@property\ndef foo():\n    pass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>之后可以将方法当作属性调用</p>\n<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><h3 id=\"相对路径\"><a href=\"#相对路径\" class=\"headerlink\" title=\"相对路径\"></a>相对路径</h3><p>.&#x2F; ..&#x2F; ..&#x2F;..&#x2F; </p>\n<h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><h3 id=\"1-sum\"><a href=\"#1-sum\" class=\"headerlink\" title=\"1.sum\"></a>1.sum</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">s &#x3D; sum(x for x in l)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-json-lt-gt-dict\"><a href=\"#2-json-lt-gt-dict\" class=\"headerlink\" title=\"2.json&lt;-&gt;dict\"></a>2.json&lt;-&gt;dict</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">j <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#已经转化为json字符串</span>\nd <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-arg\"><a href=\"#3-arg\" class=\"headerlink\" title=\"3.arg\"></a>3.arg</h3><p>注意python中有<code>positional argument</code>,<code>keyword argument</code>两种参数 规定前者在前</p>\n<p>传参的时候依次赋值，如果存在有默认值的参数也需要赋值，一旦出现后者，后面的赋值必须都要是<code>keyword argument</code>型</p>\n<h3 id=\"4-bisect\"><a href=\"#4-bisect\" class=\"headerlink\" title=\"4.bisect\"></a>4.bisect</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">print(bisect.bisect_left([1,2,3,4,5,6],3,1,3))\n源码\ndef bisect_left(a, x, lo&#x3D;0, hi&#x3D;None):\n    &quot;&quot;&quot;Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that \n    \n    all e in a[:i] have e &lt; x, and all e in\n    a[i:] have e &gt;&#x3D; x.  \n    \n    So if x already appears in the list, a.insert(x) will\n    insert just before the leftmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    &quot;&quot;&quot;\n\n    if lo &lt; 0:\n        raise ValueError(&#39;lo must be non-negative&#39;)\n    if hi is None:\n        hi &#x3D; len(a)\n    while lo &lt; hi:\n        mid &#x3D; (lo+hi)&#x2F;&#x2F;2\n        if a[mid] &lt; x: lo &#x3D; mid+1\n        else: hi &#x3D; mid\n    return lo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果所有数都比x小 则返回的index为len(a)！所以如果hi要写最好写len(a) 否则会与假定情况相悖</p>\n<p>例如</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">bisect.bisect_left([0,1,3,6,10,15],25,5,5) 返回5 但是15并不大于等于25 导致出错 \nbisect.bisect_left([0,1,3,6,10,15],25,5,6) 6 &#x3D; len(a) 返回的是6 意思是整个数组中没有大于25的数 全都小于25 综上hi一定要用len(a) 或者不写hi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-ord-chr\"><a href=\"#5-ord-chr\" class=\"headerlink\" title=\"5.ord chr\"></a>5.ord chr</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">x &#x3D; &#39;a&#39;\nprint(ord(x)) #61h\nprint(chr(97)) #&#39;a&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-x3D-x3D\"><a href=\"#6-x3D-x3D\" class=\"headerlink\" title=\"6.&#x3D;&#x3D;\"></a>6.&#x3D;&#x3D;</h3><p>注意python&#x3D;&#x3D;如果用于对象是判断地址是否相同 需要改写__eq__</p>\n<p>如果用于list可以直接判断list对应元素相不相等</p>\n<p>如果用于dict也可以判断对应kv是否完全相同</p>\n<h2 id=\"Anaconda\"><a href=\"#Anaconda\" class=\"headerlink\" title=\"Anaconda\"></a>Anaconda</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> name python <span class=\"token operator\">=</span> <span class=\"token number\">3.7</span>\n<span class=\"token comment\">#创建新环境</span>\n\nconda <span class=\"token function\">env</span> list\n<span class=\"token comment\">#查看环境</span>\n\nconda activate name\n<span class=\"token comment\">#激活环境</span>\n\nconda deactivate\n<span class=\"token comment\">#退出环境</span>\n\nconda remove <span class=\"token parameter variable\">--name</span> <span class=\"token builtin class-name\">test</span> <span class=\"token parameter variable\">--all</span>\n<span class=\"token comment\">#删除环境</span>\n\nconda <span class=\"token function\">install</span> req \npip <span class=\"token function\">install</span> req\n<span class=\"token comment\">#安装包</span>\n\nconda remove req\npip uninstall req\n<span class=\"token comment\">#卸载包</span>\n\nconda list\n<span class=\"token comment\">#查看环境</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">pip install pipreqs\npipreqs .&#x2F;\n#导出依赖包\npip install -r requirements.txt\n#导入依赖包\npip list --format&#x3D;freeze &gt; requirements.txt\n#导出依赖<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"数组初始化\"><a href=\"#数组初始化\" class=\"headerlink\" title=\"数组初始化\"></a>数组初始化</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#尽量不要用 第二重循环的意思是对列表进行浅拷贝 第一重循环对element操作 直接复制</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> l<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> l\n\n<span class=\"token comment\">#改成</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","text":"PythonLearning记录一下Python的学习，方便以后复习，如果能帮到其他人就更好了 IOinputleft,right = map(int,input().split(\" \")) #以list的形式存储 l = list(map(int,input().split(\"...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[{"name":"learning","slug":"learning","count":12,"path":"api/categories/learning.json"}],"tags":[{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PythonLearning\"><span class=\"toc-text\">PythonLearning</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IO\"><span class=\"toc-text\">IO</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#input\"><span class=\"toc-text\">input</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#output\"><span class=\"toc-text\">output</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#str-x2F-chr\"><span class=\"toc-text\">str&#x2F;chr</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-lower-upper-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.lower() upper() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-count\"><span class=\"toc-text\">2.count</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#List\"><span class=\"toc-text\">List</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-list-index\"><span class=\"toc-text\">1.list.index</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-list-insert-index-obj\"><span class=\"toc-text\">2.list.insert(index,obj)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-join-split\"><span class=\"toc-text\">3.join split</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-sort-amp-amp-sorted-key-x3D-%E6%8E%92%E5%BA%8F%E6%96%B9%E5%BC%8F-reverse-x3D-%E6%98%AF%E5%90%A6%E5%8F%8D%E8%BD%AC-%E9%BB%98%E8%AE%A4%E5%8D%87%E5%BA%8F\"><span class=\"toc-text\">4.sort &amp;&amp; sorted(key&#x3D;排序方式,reverse&#x3D;是否反转 默认升序)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%88%87%E7%89%87\"><span class=\"toc-text\">5.切片</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-list-count-obj\"><span class=\"toc-text\">6.list.count(obj)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-list-extend-seq\"><span class=\"toc-text\">7.list.extend(seq)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-list-pop\"><span class=\"toc-text\">8.list.pop()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-list-remove-obj\"><span class=\"toc-text\">9.list.remove(obj)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E5%88%87%E7%89%87\"><span class=\"toc-text\">10.切片</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F\"><span class=\"toc-text\">11.列表推导式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dict\"><span class=\"toc-text\">dict</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81if-xxx-in-dic\"><span class=\"toc-text\">1、if xxx in dic</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AD%97%E5%85%B8%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2.字典相关操作</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tuple\"><span class=\"toc-text\">tuple</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Random\"><span class=\"toc-text\">Random</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-int\"><span class=\"toc-text\">1.int</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-char\"><span class=\"toc-text\">2.char</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-string\"><span class=\"toc-text\">3.string</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%9F%E5%88%97\"><span class=\"toc-text\">队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#deque\"><span class=\"toc-text\">deque</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PriorityQueue\"><span class=\"toc-text\">PriorityQueue</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86\"><span class=\"toc-text\">堆</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DFS-BFS\"><span class=\"toc-text\">DFS BFS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DFS\"><span class=\"toc-text\">DFS</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">生成器和迭代器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">迭代器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E5%99%A8\"><span class=\"toc-text\">生成器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB\"><span class=\"toc-text\">类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%92%8C\"><span class=\"toc-text\">和*</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E8%A1%8C%E8%B5%8B%E5%80%BC-%E5%A4%9A%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC-%E3%80%81%E8%BF%9E%E7%BB%AD%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">并行赋值(多变量赋值) 、连续赋值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E8%A1%8C%E8%B5%8B%E5%80%BC%EF%BC%88%E5%A4%9A%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%EF%BC%89\"><span class=\"toc-text\">并行赋值（多变量赋值）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E7%BB%AD%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">连续赋值</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E5%88%92%E7%BA%BF\"><span class=\"toc-text\">下划线</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">特殊方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#OOP\"><span class=\"toc-text\">OOP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">@注解</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">文件操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">相对路径</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常用函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-sum\"><span class=\"toc-text\">1.sum</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-json-lt-gt-dict\"><span class=\"toc-text\">2.json&lt;-&gt;dict</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-arg\"><span class=\"toc-text\">3.arg</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-bisect\"><span class=\"toc-text\">4.bisect</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-ord-chr\"><span class=\"toc-text\">5.ord chr</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-x3D-x3D\"><span class=\"toc-text\">6.&#x3D;&#x3D;</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Anaconda\"><span class=\"toc-text\">Anaconda</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">常见问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">基本操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">数组初始化</span></a></li></ol></li></ol></li></ol>","author":{"name":"Sihan Chen","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"Had I not seen the sun, I could have borne the shade","socials":{"github":"https://github.com/sihan-chen-yes","twitter":"","stackoverflow":"https://stackoverflow.com/users/15780533/sihan","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaLearning","uid":"9b79bd1397114c7816318b0d6a9c055c","slug":"JavaLearning","date":"2021-03-03T02:56:52.000Z","updated":"2023-03-15T15:35:49.760Z","comments":true,"path":"api/articles/JavaLearning.json","keywords":null,"cover":"/post/JavaLearning/cover.jpg","text":"Java learningdetail匿名类：没有class关键词 只能实例化一个对象 内部类 类变量 实例变量 局部变量:循环体中的变量作用域仅限于该循环体 可变参数: 类中没有初始化的成员变量自动初始化为0，引用为null double... numbers 字符可以相减 &...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"18 mins."},"categories":[{"name":"learning","slug":"learning","count":12,"path":"api/categories/learning.json"}],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"}],"author":{"name":"Sihan Chen","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"Had I not seen the sun, I could have borne the shade","socials":{"github":"https://github.com/sihan-chen-yes","twitter":"","stackoverflow":"https://stackoverflow.com/users/15780533/sihan","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}