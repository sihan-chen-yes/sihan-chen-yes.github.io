{"title":"JavaLearning","uid":"9b79bd1397114c7816318b0d6a9c055c","slug":"JavaLearning","date":"2021-03-03T02:56:52.000Z","updated":"2022-11-08T07:45:57.000Z","comments":true,"path":"api/articles/JavaLearning.json","keywords":null,"cover":"/post/JavaLearning/cover.jpg","content":"<h1 id=\"JavaLearning\"><a href=\"#JavaLearning\" class=\"headerlink\" title=\"JavaLearning\"></a>JavaLearning</h1><p>记录一下Java的学习，方便以后复习，如果能帮到其他人就更好了</p>\n<hr>\n<h2 id=\"detail\"><a href=\"#detail\" class=\"headerlink\" title=\"detail\"></a>detail</h2><p>匿名类：没有class关键词 只能实例化一个对象</p>\n<p>内部类</p>\n<p>类变量</p>\n<p>实例变量</p>\n<p>局部变量:循环体中的变量作用域仅限于该循环体</p>\n<p>可变参数:</p>\n<p>类中没有初始化的成员变量自动初始化为0，引用为null</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">double... numbers<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>字符可以相减</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#39;b&#39; - &#39;a&#39; &#x3D;&#x3D; 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>java未初始化数组元素有默认值！</p>\n<p>字符和字符串竟然可以相加！</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&quot;123&quot; + &#39;1&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">异或^\n算数&gt;&gt;\n逻辑&gt;&gt;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h2><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">public class ScannerDemo &#123;\n    public static void main(String[] args) &#123;\n        Scanner scan &#x3D; new Scanner(System.in);\n        &#x2F;&#x2F; 判断是否还有输入\n        if (scan.hasNext()) &#123;\n            String str1 &#x3D; scan.next();\n            String str2 &#x3D; scan.nextLine();\n            System.out.println(&quot;输入的数据为：&quot; + str1);\n        &#125;\n        scan.close();\n        &#x2F;&#x2F;next去掉空白符 nextline读取一整行 没有回车\n\t\t&#x2F;&#x2F;不推荐用 速度太慢\n        \n        &#x2F;&#x2F;BufferedReader是Reader的子类\n        &#x2F;&#x2F;InputStreamReader读取的是字符流\n        &#x2F;&#x2F;InputStream 读取的是字节流\n        &#x2F;&#x2F;注意一个字符可能由多个字节构成\n        BufferedReader in &#x3D; new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter out &#x3D; new BufferedWriter(new OutputStreamWriter(System.out));\n        String s &#x3D; in.readLine();\n        &#x2F;&#x2F;null表示没有输入了\n        out.write();\n        &#x2F;&#x2F;需要flush才能输出\n        out.flush();\n        &#x2F;&#x2F;不要忘记关通道\n        out.close();\n        &#x2F;&#x2F;速度最快 推荐使用\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/JavaLearning/image-20220327112255766.png\" alt=\"image-20220327112255766\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//char占用的是2个字节16位，所以一个char类型的可以存储一个汉字</span>\n<span class=\"token keyword\">char</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"好\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>引用</p>\n<p>内置 byte short int long char float double boolean</p>\n<p>对应的bit 8 16 32 64 16 32 64 1</p>\n<h3 id=\"装箱-x2F-拆箱\"><a href=\"#装箱-x2F-拆箱\" class=\"headerlink\" title=\"装箱&#x2F;拆箱\"></a>装箱&#x2F;拆箱</h3><p>将基本类型封&#x2F;拆成对象</p>\n<p><img src=\"/post/JavaLearning/image-20220327103922569.png\" alt=\"image-20220327103922569\"></p>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>StringBuffer线程安全 速度慢</p>\n<p>StringBuilder速度更快 线程不安全</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">String[] array &#x3D; sentence.split(&quot; &quot;);\n        StringBuilder ans &#x3D; new StringBuilder();\n        for (String s:array) &#123;\n            String cur &#x3D; rootNode.getRoot(s);\n            if (cur !&#x3D; null) &#123;\n                ans.append(cur);\n            &#125; else &#123;\n                ans.append(s);\n                &#x2F;&#x2F;不替换\n            &#125;\n            &#x2F;&#x2F;注意空格\n            ans.append(&quot; &quot;);\n        &#125;\n        &#x2F;&#x2F;删去最后一个空格\n        ans.deleteCharAt(ans.length() - 1);\n        return ans.toString();\nString s &#x3D; &quot;123&quot;;\ns.indexOf(&quot;1&quot;);&#x2F;&#x2F;返回开始的下标 如果为0 说明是prefix<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"控制流\"><a href=\"#控制流\" class=\"headerlink\" title=\"控制流\"></a>控制流</h2><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F;while\npublic class Test &#123;\n   public static void main(String[] args) &#123;\n      int x &#x3D; 10;\n      while( x &lt; 20 ) &#123;\n         System.out.print(&quot;value of x : &quot; + x );\n         x++;\n         System.out.print(&quot;\\n&quot;);\n      &#125;\n   &#125;\n&#125;\n&#x2F;&#x2F;do while\npublic class Test &#123;\n   public static void main(String[] args)&#123;\n      int x &#x3D; 10;\n \n      do&#123;\n         System.out.print(&quot;value of x : &quot; + x );\n         x++;\n         System.out.print(&quot;\\n&quot;);\n      &#125;while( x &lt; 20 );\n   &#125;\n&#125;\n&#x2F;&#x2F;for \npublic class Test &#123;\n   public static void main(String[] args) &#123;\n \n      for(int x &#x3D; 10; x &lt; 20; x &#x3D; x+1) &#123;\n         System.out.print(&quot;value of x : &quot; + x );\n         System.out.print(&quot;\\n&quot;);\n      &#125;\n   &#125;\n&#125;\npublic class Main &#123;\n    public static void main(String[] args) &#123;\n        int[] foo &#x3D; &#123;1,2,3&#125;;\n        for (int f : foo) &#123;\n            System.out.println(f);\n        &#125;\n    &#125;\n&#125;\n&#x2F;&#x2F;switch 没有break一直往下执行 注意一定要有break\npublic class Test &#123;\n   public static void main(String args[])&#123;\n      &#x2F;&#x2F;char grade &#x3D; args[0].charAt(0);\n      char grade &#x3D; &#39;C&#39;;\n      switch(grade)\n      &#123;\n         case &#39;A&#39; :\n            System.out.println(&quot;优秀&quot;); \n            break;\n         case &#39;B&#39; :\n         case &#39;C&#39; :\n            System.out.println(&quot;良好&quot;);\n            break;\n         default :\n            System.out.println(&quot;未知等级&quot;);\n      &#125;\n      System.out.println(&quot;你的等级是 &quot; + grade);\n   &#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">int[] name &#x3D; &#123;&#125;;\nint[] name &#x3D; new int[5];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p>List Map Array遍历可用foreach</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">int[] nums &#x3D; &#123;1,2&#125;;\nArrays.stream(nums).forEach(System.out::println);\n&#x2F;&#x2F;IntStream\n&#x2F;&#x2F;函数式编程 函数接口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>统一遍历</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">for (int num:nums) &#123;\n    \n&#125;\n\nfor (Entry&lt;String,String&gt; entry : hashMap.entrySet()) &#123;\n    \n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>comparator是一个interface 这里不是new接口 而是new一个实现了该接口的匿名类 {} 里是对该interface的实现</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">private PriorityQueue&lt;int[]&gt; heap &#x3D; new PriorityQueue&lt;&gt;(new Comparator&lt;int[]&gt;() &#123;\n        public int compare(int[] m, int[] n) &#123;\n            return m[1] - n[1];\n        &#125;\n    &#x2F;&#x2F;\n    &#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"/post/JavaLearning/java-coll-2020-11-16.png\" alt=\"img\"></p>\n<h3 id=\"1-Queue-x2F-PriorityQueue\"><a href=\"#1-Queue-x2F-PriorityQueue\" class=\"headerlink\" title=\"1.Queue&#x2F;PriorityQueue\"></a>1.Queue&#x2F;PriorityQueue</h3><p>java默认小顶堆</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">        Queue&lt;String&gt; foo &#x3D; new LinkedList&lt;&gt;();\n        foo.offer(&quot;123&quot;);\n\t\tfoo.poll();\n\t\tfoo.peek();\n\t\t&#x2F;&#x2F;无异常\n\t\tfoo.add(&quot;123&quot;);\n\t\tfoo.remove();\n\t\tfoo.element();\n\t\t&#x2F;&#x2F;可能有异常\n        foo.offer(&quot;4444&quot;);\n        System.out.println(foo.poll());\n        System.out.println(foo.poll());\n        System.out.println(foo.remove());\n&#x2F;&#x2F;      foo.add(“123”);如果容量满了则会报异常\n&#x2F;&#x2F;尽量用offer poll<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-ArrayList-x2F-LinkedList\"><a href=\"#2-ArrayList-x2F-LinkedList\" class=\"headerlink\" title=\"2.ArrayList&#x2F;LinkedList\"></a>2.ArrayList&#x2F;LinkedList</h3><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">ArrayList&lt;type&gt; l &#x3D; new ArrayList();\nl.add();\nl.addAll();\nl.contains();\nl.containsAll();\nl.get();\nl.indexOf();\nl.clone();\nl.size();\nl.remove();\nl.removeAll();\nl.removeIf(e -&gt; e &#x3D;&#x3D; 8);\n\nif (!emaillist.isEmpty()) &#123;\n            Collections.sort(emaillist, new Comparator&lt;Email&gt;() &#123;\n                @Override\n                public int compare(Email o1, Email o2) &#123;\n                    return o1.getUsername().toLowerCase().compareTo(o2.getUsername().toLowerCase());\n                &#125;\n            &#125;);\n        &#125;\nCollections.sort(sites);  &#x2F;&#x2F; 字母排序\n&#x2F;&#x2F;深copy\nArrayList&lt;Integer&gt; num &#x3D; (ArrayList&lt;Integer&gt;) myNumbers.clone();&#x2F;&#x2F;clone\nArrayList&lt;Integer&gt; n &#x3D; new ArrayList&lt;&gt;(num);&#x2F;&#x2F;clone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"3-HashMap-x2F-HashSet-x2F-LinkedHashmap-x2F-TreeMap\"><a href=\"#3-HashMap-x2F-HashSet-x2F-LinkedHashmap-x2F-TreeMap\" class=\"headerlink\" title=\"3.HashMap&#x2F;HashSet&#x2F;LinkedHashmap&#x2F;TreeMap\"></a>3.HashMap&#x2F;HashSet&#x2F;LinkedHashmap&#x2F;TreeMap</h3><p>无序 非线程安全</p>\n<p>HashMap和LinkedHashMap使用接口完全一样<br>TreeMap</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">m.put(k,v);\nm.get(k);\nm.remove(k);\nm.clear();\nm.size();\nm.keySet();\nm.values();\nm.entrySet();\nm.containsKey();\nm.containsValue();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>HashSet&#x2F;TreeSet</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">s.add();\ns.addAll();\ns.remove();\ns.size();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>TreeSet&#x2F;TreeMap</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">TreeSet&lt;String&gt; s &#x3D; new TreeSet&lt;&gt;();\ns.floor();\ns.ceiling();\nTreeMap&lt;String,String&gt; m &#x3D; new TreeMap&lt;&gt;();\nm.floorEntry();\nm.ceilingEntry();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"4-HashSet-x2F-TreeSet\"><a href=\"#4-HashSet-x2F-TreeSet\" class=\"headerlink\" title=\"4.HashSet&#x2F;TreeSet\"></a>4.HashSet&#x2F;TreeSet</h3><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">s.add();\ns.addAll();\ns.remove();\ns.size();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-stack\"><a href=\"#5-stack\" class=\"headerlink\" title=\"5.stack\"></a>5.stack</h3><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">Stack&lt;type&gt; s &#x3D; new Stack&lt;&gt;();\ns.push();\ns.pop();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">        Iterator&lt;String&gt; ite&#x3D;list.iterator();\n        while(ite.hasNext())&#x2F;&#x2F;判断下一个元素之后有值\n        &#123;\n            System.out.println(ite.next());\n        &#125;\n\nIterator&lt;Map.Entry&lt;String, String&gt;&gt; it &#x3D; map.entrySet().iterator();\n        while (it.hasNext()) &#123;\n            Map.Entry&lt;String, String&gt; entry &#x3D; it.next();\n            System.out.println(&quot;key&#x3D; &quot; + entry.getKey() + &quot; and value&#x3D; &quot; + entry.getValue());\n        &#125;\nite.next();\nite.hasNext();\nite.remove();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h3><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">ArrayList collect &#x3D;(ArrayList)Stream.of(a,b).flatMap(Collection::stream).distinct().collect(Collectors.toList());<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">   @Override\n   public int compareTo(Object o) &#123;\n       Error error &#x3D; (Error) o;\n       if (this.getLine() &lt; error.getLine()) &#123;\n           return -1;\n       &#125; else if (this.getLine() &#x3D;&#x3D; error.getLine()) &#123;\n           return 0;\n       &#125; else &#123;\n           return 1;\n       &#125;\n   &#125;&#x2F;&#x2F;重写方法\nCollections.sort(errorList);\n   Collections.sort(list, new Comparator&lt;Integer&gt;() &#123;\n         @Override\n         public int compare(Integer o1, Integer o2) &#123;\n             return 0;\n         &#125;\n     &#125;);\nArrays.sort(a,new Comparator&lt;int[]&gt;() &#123;\n       &#x2F;&#x2F;Comparator里的类型为要排序的对象的类型\n           public int compare(int[] o1,int[] o2) &#123;\n               if (o1[0] - o2[0] !&#x3D; 0) &#123;\n                   return o1[0] - o2[0];\n               &#125; else &#123;\n                   return o1[1] - o2[1];\n               &#125;\n           &#125;\n       &#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p><img src=\"/post/JavaLearning/image-20220327123935589.png\" alt=\"image-20220327123935589\"></p>\n<p>通配符 ？不能超过上层类型</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">   public static &lt; E &gt; void printArray( E[] inputArray )\n   &#123;\n      &#x2F;&#x2F; 输出数组元素            \n         for ( E element : inputArray )&#123;        \n            System.out.printf( &quot;%s &quot;, element );\n         &#125;\n         System.out.println();\n    &#125;\n\n   public static &lt;T extends Comparable&lt;T&gt;&gt; T maximum(T x, T y, T z)\n   &#123;                     \n      T max &#x3D; x; &#x2F;&#x2F; 假设x是初始最大值\n      if ( y.compareTo( max ) &gt; 0 )&#123;\n         max &#x3D; y; &#x2F;&#x2F;y 更大\n      &#125;\n      if ( z.compareTo( max ) &gt; 0 )&#123;\n         max &#x3D; z; &#x2F;&#x2F; 现在 z 更大           \n      &#125;\n      return max; &#x2F;&#x2F; 返回最大对象\n   &#125;\n\nclass Box&lt;T&gt; &#123;\n   \n  private T t;\n \n  public void add(T t) &#123;\n    this.t &#x3D; t;\n  &#125;\n \n  public T get() &#123;\n    return t;\n  &#125;\n \n  public static void main(String[] args) &#123;\n    Box&lt;Integer&gt; integerBox &#x3D; new Box&lt;Integer&gt;();\n    Box&lt;String&gt; stringBox &#x3D; new Box&lt;String&gt;();\n \n    integerBox.add(new Integer(10));\n    stringBox.add(new String(&quot;菜鸟教程&quot;));\n \n    System.out.printf(&quot;整型值为 :%d\\n\\n&quot;, integerBox.get());\n    System.out.printf(&quot;字符串为 :%s\\n&quot;, stringBox.get());\n  &#125;\n&#125;\n\n   public static void getData(List&lt;?&gt; data) &#123;\n      System.out.println(&quot;data :&quot; + data.get(0));\n   &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h2><p>Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。</p>\n<p>将序列化对象写入文件之后，可以从文件中读取出来，并且对它进行反序列化，也就是说，对象的类型信息、对象的数据，还有对象中的数据类型可以用来在内存中新建对象。</p>\n<p>反序列化的时候，必须能够找到对应字节码的类</p>\n<p>transient 反序列初始为0</p>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p><img src=\"/post/JavaLearning/java-thread.jpg\" alt=\"img\"></p>\n<ul>\n<li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li>\n<li>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</li>\n<li>其他阻塞（虽然阻塞但是没有获得锁）：通过调用线程的 sleep() 或 join() 发出了 I&#x2F;O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I&#x2F;O 处理完毕，线程重新转入就绪状态。</li>\n</ul>\n<p>守护线程：其他所有线程结束后 JVM退出 不关心守护线程的运行情况 JVM退出后守护线程会自动关闭 用来执行后台任务</p>\n<p>优先级不保证执行顺序</p>\n<p>只需要自己执行start（）,run能隐式执行</p>\n<p>start会创建线程 run不会 只是一个普通方法</p>\n<p>创建线程的方式(都需要实现run方法 calllable是call方法):</p>\n<ul>\n<li>implements runnable</li>\n<li>extends Thread</li>\n<li>implements callable （可以有返回值 可以抛异常）</li>\n</ul>\n<h2 id=\"修饰符限定范围\"><a href=\"#修饰符限定范围\" class=\"headerlink\" title=\"修饰符限定范围\"></a>修饰符限定范围</h2><ul>\n<li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li>\n<li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li>\n<li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li>\n<li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li>\n</ul>\n<p><img src=\"/post/JavaLearning/image-20220327102635574.png\" alt=\"image-20220327102635574\"></p>\n<h2 id=\"字符串-x2F-字符\"><a href=\"#字符串-x2F-字符\" class=\"headerlink\" title=\"字符串&#x2F;字符\"></a>字符串&#x2F;字符</h2><p>string不可修改</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">s.charAt(num);\ns.length();\ns.equals();\ns.toLowerCase();\n&#x2F;&#x2F;+ 拼接\ns.compareTo();\ns.indexOf(String str,int index)\nString replace(char oldChar, char newChar)\nString substring(int beginIndex, int endIndex)\nString toString()\ncontains(CharSequence chars)\n&#x2F;&#x2F;格式化字符串输出\nString.format(&quot;XX&quot; + &quot;YY&quot; + &quot;%d&quot;,v);\nString a &#x3D; &quot;123&quot;;&#x2F;&#x2F;常量池\nString b &#x3D; new String(&quot;123&quot;);&#x2F;&#x2F;堆<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/JavaLearning/image-20220327104311421.png\" alt=\"image-20220327104311421\"></p>\n<h2 id=\"常用库\"><a href=\"#常用库\" class=\"headerlink\" title=\"常用库\"></a>常用库</h2><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">Math.floor;\nMath.round;\nMath.ceil;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">        String s &#x3D; &quot;W10&quot;;\n        String pattern &#x3D; &quot;(A|W|D|S)(?&lt;num&gt;\\\\d&#123;2&#125;)&quot;;\n        Pattern p &#x3D; Pattern.compile(pattern);\n        Matcher m &#x3D; p.matcher(s);\n        if (m.find()) &#123;\n&#x2F;&#x2F;            Integer n &#x3D; m.group(2);\n            System.out.println(m.group(2));\n        &#125;\n        String a &#x3D; &quot;aaabbaaaa&quot;;\n        String pattern &#x3D; &quot;.*(...).*\\\\1.*&quot;;\n&#x2F;&#x2F;\\\\1表示第一个group 要和第一个group相同\n        Pattern p &#x3D; Pattern.compile(pattern);\n        Matcher m &#x3D; p.matcher(a);\n        System.out.println(m.find());<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h3><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">private Random random &#x3D; new Random();\n&#x2F;&#x2F;[0,total)\nint x &#x3D; (int) random.nextInt(total - 1) * total + 1;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h3><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">int[] a &#x3D; new int[] &#123;1,2&#125;;\nSystem.out.println(Arrays.stream(a).max().getAsInt());\n&#x2F;&#x2F;串行流没有for循环快 并行流比for快\nint[][] a &#x3D; &#123;&#123;1,2&#125;,&#123;4,3&#125;,&#123;1,3&#125;&#125;;\n        Arrays.sort(a,new Comparator&lt;int[]&gt;() &#123;\n            public int compare(int[] o1,int[] o2) &#123;\n                if (o1[0] - o2[0] !&#x3D; 0) &#123;\n                    return o1[0] - o2[0];\n                &#125; else &#123;\n                    return o1[1] - o2[1];\n                &#125;\n            &#125;\n        &#125;);\n&#x2F;&#x2F;排序\n        List&lt;int[]&gt; b &#x3D; Arrays.asList(a);\n        a &#x3D; b.toArray(new int[b.size()][]);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"文件IO\"><a href=\"#文件IO\" class=\"headerlink\" title=\"文件IO\"></a>文件IO</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedOutputStream</span> bufferedOutputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Iterator</span> iterator <span class=\"token operator\">=</span> wordAnalysisList<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                symbol <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ANNO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                bufferedOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s\\n\"</span><span class=\"token punctuation\">,</span>symbol<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>symbol<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            bufferedOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">FileWriter</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span>writeFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Iterator</span> iterator <span class=\"token operator\">=</span> wordAnalysisList<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                symbol <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ANNO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s\\n\"</span><span class=\"token punctuation\">,</span>symbol<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>symbol<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            writer<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            writer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">pintStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><p><img src=\"/post/JavaLearning/exception-hierarchy.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">try &#123;\n    file &#x3D; new FileInputStream(fileName);\n    x &#x3D; (byte) file.read();\n&#125; catch(FileNotFoundException f) &#123; &#x2F;&#x2F; Not valid!\n    f.printStackTrace();\n    return -1;\n&#125; catch(IOException i) &#123;\n    i.printStackTrace();\n    return -1;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Exception又分为两种：</p>\n<ul>\n<li><strong>JVM(Java**<strong>虚拟机</strong></strong>)** <strong>异常：</strong>由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。</li>\n<li><strong>程序级异常：</strong>由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。</li>\n</ul>\n<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><p>{}里面是匿名函数</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">map.forEach((key,value) -&gt; &#123;\n            if (heap.size() &lt; k) &#123;\n                heap.offer(new int[] &#123;key,value&#125;);\n            &#125; else if (value &gt; heap.peek()[1]) &#123;\n                heap.poll();\n                heap.offer(new int[] &#123;key,value&#125;);\n            &#125;\n            &#x2F;&#x2F;匿名函数\n        &#125;);\n\nPriorityQueue&lt;int[]&gt; heap &#x3D; new PriorityQueue&lt;&gt;(new &lt;int[]&gt;() &#123;\n            public int compare(int[] m, int[] n) &#123;\n                return m[1] - n[1];\n            &#125;\n        &#125;);\n表示实现Comparator接口的匿名类<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"lambda表达式\"><a href=\"#lambda表达式\" class=\"headerlink\" title=\"lambda表达式\"></a>lambda表达式</h3><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">PriorityQueue&lt;int[]&gt; pq &#x3D; new PriorityQueue&lt;int[]&gt;((a,b)-&gt;nums1[a[0]]+nums2[a[1]]-nums1[b[0]]-nums2[b[1]]);\n&#x2F;&#x2F;() -&gt; 返回值 括号为传入参数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"OO相关\"><a href=\"#OO相关\" class=\"headerlink\" title=\"OO相关\"></a>OO相关</h2><h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>extends 默认继承object</p>\n<p>super this</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">public class Animal &#123; \n    private String name;  \n    private int id; \n    public Animal(String myName, int myid) &#123; \n        name &#x3D; myName; \n        id &#x3D; myid;\n    &#125; \n    public void eat()&#123; \n        System.out.println(name+&quot;正在吃&quot;); \n    &#125;\n&#125;\npublic class Penguin extends Animal &#123; \n    public Penguin(String myName, int myid) &#123; \n        super(myName, myid); \n    &#125; \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"/post/JavaLearning/image-20220327112956104.png\" alt=\"image-20220327112956104\"></p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>implements</p>\n<p>除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。</p>\n<p><img src=\"/post/JavaLearning/image-20220327114615242.png\" alt=\"image-20220327114615242\"></p>\n<h3 id=\"抽象类-x2F-方法\"><a href=\"#抽象类-x2F-方法\" class=\"headerlink\" title=\"抽象类&#x2F;方法\"></a>抽象类&#x2F;方法</h3><p>abstract </p>\n<p>抽象方法无方法体</p>\n<p>必须被继承才能使用 必须重写抽象类的抽象方法 否则也必须是抽象类</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">public abstract class Employee\n&#123;\n   private String name;\n   private String address;\n   private int number;\n   \n   public abstract double computePay();\n   \n   &#x2F;&#x2F;其余代码\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"重载和重写\"><a href=\"#重载和重写\" class=\"headerlink\" title=\"重载和重写\"></a>重载和重写</h3><p>重载（overload）：必须拥有不同的参数列表（名字还是相同）返回类型可以不同 方法体当然可以不同 即函数签名需不一样</p>\n<p><img src=\"/post/JavaLearning/image-20220327113616025.png\" alt=\"image-20220327113616025\"></p>\n<p>重写(override):只改变方法体 函数签名需要完全相同</p>\n<p><img src=\"/post/JavaLearning/image-20220327113539479.png\" alt=\"image-20220327113539479\"></p>\n","text":"JavaLearning记录一下Java的学习，方便以后复习，如果能帮到其他人就更好了 detail匿名类：没有class关键词 只能实例化一个对象 内部类 类变量 实例变量 局部变量:循环体中的变量作用域仅限于该循环体 可变参数: 类中没有初始化的成员变量自动初始化为0，引用为...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"learning","slug":"learning","count":12,"path":"api/categories/learning.json"}],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaLearning\"><span class=\"toc-text\">JavaLearning</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#detail\"><span class=\"toc-text\">detail</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IO\"><span class=\"toc-text\">IO</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A3%85%E7%AE%B1-x2F-%E6%8B%86%E7%AE%B1\"><span class=\"toc-text\">装箱&#x2F;拆箱</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E6%B5%81\"><span class=\"toc-text\">控制流</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Queue-x2F-PriorityQueue\"><span class=\"toc-text\">1.Queue&#x2F;PriorityQueue</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-ArrayList-x2F-LinkedList\"><span class=\"toc-text\">2.ArrayList&#x2F;LinkedList</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-HashMap-x2F-HashSet-x2F-LinkedHashmap-x2F-TreeMap\"><span class=\"toc-text\">3.HashMap&#x2F;HashSet&#x2F;LinkedHashmap&#x2F;TreeMap</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-HashSet-x2F-TreeSet\"><span class=\"toc-text\">4.HashSet&#x2F;TreeSet</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-stack\"><span class=\"toc-text\">5.stack</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">迭代器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E9%87%8D\"><span class=\"toc-text\">去重</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">排序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">序列化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">多线程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E9%A5%B0%E7%AC%A6%E9%99%90%E5%AE%9A%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">修饰符限定范围</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2-x2F-%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">字符串&#x2F;字符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%BA%93\"><span class=\"toc-text\">常用库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">正则表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%95%B0\"><span class=\"toc-text\">随机数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Array\"><span class=\"toc-text\">Array</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6IO\"><span class=\"toc-text\">文件IO</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">异常</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">函数式编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">lambda表达式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#OO%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">OO相关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB-x2F-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">抽象类&#x2F;方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99\"><span class=\"toc-text\">重载和重写</span></a></li></ol></li></ol></li></ol>","author":{"name":"Sihan Chen","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"Had I not seen the sun, I could have borne the shade","socials":{"github":"https://github.com/sihan-chen-yes","twitter":"","stackoverflow":"https://stackoverflow.com/users/15780533/sihan","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CppLearning","uid":"043ea5846f4ce7e1aaad5107c0f5a6a3","slug":"CppLearning","date":"2021-06-21T02:55:58.000Z","updated":"2023-03-02T08:57:11.752Z","comments":true,"path":"api/articles/CppLearning.json","keywords":null,"cover":"/post/CppLearning/cover.jpg","text":"C++learning1.基本语法1.命名空间在C&#x2F;C++中，变量、函数和类都是大量存在的，这些变量、函数和类的名称将都存在于全局作用域中，可能会导致很多冲突。使用命名空间的目的是对标识符的名称进行本地化，以避免命名冲突或名字污染。 定义：namespace name1...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"learning","slug":"learning","count":12,"path":"api/categories/learning.json"}],"tags":[{"name":"C++","slug":"C","count":1,"path":"api/tags/C.json"}],"author":{"name":"Sihan Chen","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"Had I not seen the sun, I could have borne the shade","socials":{"github":"https://github.com/sihan-chen-yes","twitter":"","stackoverflow":"https://stackoverflow.com/users/15780533/sihan","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"PythonLearning","uid":"16dddd2808895ffe203f5dab69ce83b4","slug":"PythonLearning","date":"2020-09-05T02:57:00.000Z","updated":"2022-11-08T07:57:11.000Z","comments":true,"path":"api/articles/PythonLearning.json","keywords":null,"cover":"/post/PythonLearning/cover.jpg","text":"PythonLearning记录一下Python的学习，方便以后复习，如果能帮到其他人就更好了 IOinputleft,right = map(int,input().split(\" \")) #以list的形式存储 l = list(map(int,input().split(\"...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[{"name":"learning","slug":"learning","count":12,"path":"api/categories/learning.json"}],"tags":[{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"}],"author":{"name":"Sihan Chen","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"Had I not seen the sun, I could have borne the shade","socials":{"github":"https://github.com/sihan-chen-yes","twitter":"","stackoverflow":"https://stackoverflow.com/users/15780533/sihan","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}